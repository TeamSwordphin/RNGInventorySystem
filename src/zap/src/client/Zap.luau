--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Client generated by Zap v0.6.8 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		SendAutoRollIndex = table.freeze({
			Fire = noop
		}),
		SendPlayerTradeRequest = table.freeze({
			Fire = noop
		}),
		OnPlayerTradeRequest = table.freeze({
			On = noop
		}),
		AcceptPlayerTradeRequest = table.freeze({
			Fire = noop
		}),
		OnServerTradeBegun = table.freeze({
			On = noop
		}),
		SendClientTradeCancel = table.freeze({
			Fire = noop
		}),
		OnServerTradeCancel = table.freeze({
			On = noop
		}),
		ClientSentItemTradeOffer = table.freeze({
			Fire = noop
		}),
		ServerSentItemTradeOffer = table.freeze({
			On = noop
		}),
		RequestUpgradeInventorySpace = table.freeze({
			Call = noop
		}),
		RequestRandomLootDrop = table.freeze({
			Call = noop
		}),
		RequestItemCount = table.freeze({
			Call = noop
		}),
		AddItemToCraftIngredient = table.freeze({
			Call = noop
		}),
		CraftItem = table.freeze({
			Call = noop
		}),
		RequestCurrentTradeStatus = table.freeze({
			Call = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local reliable = ReplicatedStorage:WaitForChild("ZAP_RELIABLE")
local unreliable = ReplicatedStorage:WaitForChild("ZAP_UNRELIABLE")

assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")
assert(unreliable:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE to be an UnreliableRemoteEvent")


local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local events = table.create(15)
local event_queue: { [number]: { any } } = table.create(15)
local function_call_id = 0
events[3] = {}
event_queue[3] = {}
events[5] = {}
event_queue[5] = {}
events[7] = {}
event_queue[7] = 0
events[9] = {}
event_queue[9] = {}
event_queue[10] = table.create(255)
event_queue[11] = table.create(255)
event_queue[12] = table.create(255)
event_queue[13] = table.create(255)
event_queue[14] = table.create(255)
event_queue[15] = table.create(255)
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 3 then
			local value
			incoming_ipos = incoming_ipos + 1
			value = incoming_inst[incoming_ipos]
			assert(value ~= nil)
			assert(value:IsA("Player"))
			if events[3][1] then
				for _, cb in events[3] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[3], value)
				if #event_queue[3] > 64 then
					warn(`[ZAP] {#event_queue[3]} events in queue for OnPlayerTradeRequest. Did you forget to attach a listener?`)
				end
			end
		elseif id == 5 then
			local value
			value = {}
			incoming_ipos = incoming_ipos + 1
			value.inviter = incoming_inst[incoming_ipos]
			assert(value.inviter ~= nil)
			assert(value.inviter:IsA("Player"))
			incoming_ipos = incoming_ipos + 1
			value.recipient = incoming_inst[incoming_ipos]
			assert(value.recipient ~= nil)
			assert(value.recipient:IsA("Player"))
			if events[5][1] then
				for _, cb in events[5] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[5], value)
				if #event_queue[5] > 64 then
					warn(`[ZAP] {#event_queue[5]} events in queue for OnServerTradeBegun. Did you forget to attach a listener?`)
				end
			end
		elseif id == 7 then
			local value
			if events[7][1] then
				for _, cb in events[7] do
					task.spawn(cb, value)
				end
			else
				event_queue[7] += 1
				if event_queue[7] > 16 then
					warn(`[ZAP] {event_queue[7]} events in queue for OnServerTradeCancel. Did you forget to attach a listener?`)
				end
			end
		elseif id == 9 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.category = buffer.readstring(incoming_buff, read(len_1), len_1)
			value.id = buffer.readu32(incoming_buff, read(4))
			value.level = buffer.readu8(incoming_buff, read(1))
			if events[9][1] then
				for _, cb in events[9] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[9], value)
				if #event_queue[9] > 64 then
					warn(`[ZAP] {#event_queue[9]} events in queue for ServerSentItemTradeOffer. Did you forget to attach a listener?`)
				end
			end
		elseif id == 10 then
			local call_id = buffer.readu8(incoming_buff, read(1))
			local value
			value = {}
			value.success = buffer.readu8(incoming_buff, read(1)) == 1
			value.inventory = buffer.readu16(incoming_buff, read(2))
			task.spawn(event_queue[10][call_id], value)
			event_queue[10][call_id] = nil
		elseif id == 11 then
			local call_id = buffer.readu8(incoming_buff, read(1))
			local value
			value = {}
			value.success = buffer.readu8(incoming_buff, read(1)) == 1
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.category = buffer.readstring(incoming_buff, read(len_1), len_1)
			value.id = buffer.readu16(incoming_buff, read(2))
			task.spawn(event_queue[11][call_id], value)
			event_queue[11][call_id] = nil
		elseif id == 12 then
			local call_id = buffer.readu8(incoming_buff, read(1))
			local value
			value = {}
			value.success = buffer.readu8(incoming_buff, read(1)) == 1
			value.count = buffer.readf64(incoming_buff, read(8))
			task.spawn(event_queue[12][call_id], value)
			event_queue[12][call_id] = nil
		elseif id == 13 then
			local call_id = buffer.readu8(incoming_buff, read(1))
			local value
			value = {}
			value.success = buffer.readu8(incoming_buff, read(1)) == 1
			value.count = buffer.readu32(incoming_buff, read(4))
			task.spawn(event_queue[13][call_id], value)
			event_queue[13][call_id] = nil
		elseif id == 14 then
			local call_id = buffer.readu8(incoming_buff, read(1))
			local value
			value = {}
			value.success = buffer.readu8(incoming_buff, read(1)) == 1
			task.spawn(event_queue[14][call_id], value)
			event_queue[14][call_id] = nil
		elseif id == 15 then
			local call_id = buffer.readu8(incoming_buff, read(1))
			local value
			value = {}
			value.success = buffer.readu8(incoming_buff, read(1)) == 1
			task.spawn(event_queue[15][call_id], value)
			event_queue[15][call_id] = nil
		else
			error("Unknown event id")
		end
	end
end)
local returns = table.freeze({
	SendEvents = SendEvents,
	SendAutoRollIndex = table.freeze({
		Fire = function(Value: (number))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value)
		end,
	}),
	SendPlayerTradeRequest = table.freeze({
		Fire = function(Value: (Player))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			assert(Value:IsA("Player"))
			table.insert(outgoing_inst, Value)
		end,
	}),
	AcceptPlayerTradeRequest = table.freeze({
		Fire = function(Value: (Player))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			assert(Value:IsA("Player"))
			table.insert(outgoing_inst, Value)
		end,
	}),
	SendClientTradeCancel = table.freeze({
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
		end,
	}),
	ClientSentItemTradeOffer = table.freeze({
		Fire = function(Value: ({
			category: (string),
			id: (number),
			level: (number),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			local len_1 = #Value.category
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.category, len_1)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.id)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.level)
		end,
	}),
	OnPlayerTradeRequest = table.freeze({
		On = function(Callback: ((Player)) -> ())
			table.insert(events[3], Callback)
			for _, value in event_queue[3] do
				task.spawn(Callback, value)
			end
			event_queue[3] = {}
			return function()
				table.remove(events[3], table.find(events[3], Callback))
			end
		end,
	}),
	OnServerTradeBegun = table.freeze({
		On = function(Callback: (({
			inviter: (Player),
			recipient: (Player),
		})) -> ())
			table.insert(events[5], Callback)
			for _, value in event_queue[5] do
				task.spawn(Callback, value)
			end
			event_queue[5] = {}
			return function()
				table.remove(events[5], table.find(events[5], Callback))
			end
		end,
	}),
	OnServerTradeCancel = table.freeze({
		On = function(Callback: () -> ())
			table.insert(events[7], Callback)
			for _ = 1, event_queue[7] do
				task.spawn(Callback)
			end
			event_queue[7] = 0
			return function()
				table.remove(events[7], table.find(events[7], Callback))
			end
		end,
	}),
	ServerSentItemTradeOffer = table.freeze({
		On = function(Callback: (({
			category: (string),
			id: (number),
			level: (number),
		})) -> ())
			table.insert(events[9], Callback)
			for _, value in event_queue[9] do
				task.spawn(Callback, value)
			end
			event_queue[9] = {}
			return function()
				table.remove(events[9], table.find(events[9], Callback))
			end
		end,
	}),
	RequestUpgradeInventorySpace = table.freeze({
		Call = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 10)
			function_call_id += 1
			function_call_id %= 256
			if event_queue[10][function_call_id] then
				function_call_id -= 1
				error("Zap has more than 256 calls awaiting a response, and therefore this packet has been dropped")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, function_call_id)
			event_queue[10][function_call_id] = coroutine.running()
			local value = coroutine.yield()
			return value
		end,
	}),
	RequestRandomLootDrop = table.freeze({
		Call = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 11)
			function_call_id += 1
			function_call_id %= 256
			if event_queue[11][function_call_id] then
				function_call_id -= 1
				error("Zap has more than 256 calls awaiting a response, and therefore this packet has been dropped")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, function_call_id)
			event_queue[11][function_call_id] = coroutine.running()
			local value = coroutine.yield()
			return value
		end,
	}),
	RequestItemCount = table.freeze({
		Call = function(Value: ({
			category: (string),
			id: (number),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 12)
			function_call_id += 1
			function_call_id %= 256
			if event_queue[12][function_call_id] then
				function_call_id -= 1
				error("Zap has more than 256 calls awaiting a response, and therefore this packet has been dropped")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, function_call_id)
			local len_1 = #Value.category
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.category, len_1)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.id)
			event_queue[12][function_call_id] = coroutine.running()
			local value = coroutine.yield()
			return value
		end,
	}),
	AddItemToCraftIngredient = table.freeze({
		Call = function(Value: ({
			craftIndex: (number),
			category: (string),
			id: (number),
			level: (number),
			amount: (number),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 13)
			function_call_id += 1
			function_call_id %= 256
			if event_queue[13][function_call_id] then
				function_call_id -= 1
				error("Zap has more than 256 calls awaiting a response, and therefore this packet has been dropped")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, function_call_id)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.craftIndex)
			local len_1 = #Value.category
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.category, len_1)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.id)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.level)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.amount)
			event_queue[13][function_call_id] = coroutine.running()
			local value = coroutine.yield()
			return value
		end,
	}),
	CraftItem = table.freeze({
		Call = function(Value: (number))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
			function_call_id += 1
			function_call_id %= 256
			if event_queue[14][function_call_id] then
				function_call_id -= 1
				error("Zap has more than 256 calls awaiting a response, and therefore this packet has been dropped")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, function_call_id)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value)
			event_queue[14][function_call_id] = coroutine.running()
			local value = coroutine.yield()
			return value
		end,
	}),
	RequestCurrentTradeStatus = table.freeze({
		Call = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			function_call_id += 1
			function_call_id %= 256
			if event_queue[15][function_call_id] then
				function_call_id -= 1
				error("Zap has more than 256 calls awaiting a response, and therefore this packet has been dropped")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, function_call_id)
			event_queue[15][function_call_id] = coroutine.running()
			local value = coroutine.yield()
			return value
		end,
	}),
})
type Events = typeof(returns)
return returns
