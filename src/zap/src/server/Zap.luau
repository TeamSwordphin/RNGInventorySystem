--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Server generated by Zap v0.6.8 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		SendAutoRollIndex = table.freeze({
			On = noop
		}),
		SendPlayerTradeRequest = table.freeze({
			On = noop
		}),
		OnPlayerTradeRequest = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		AcceptPlayerTradeRequest = table.freeze({
			On = noop
		}),
		OnServerTradeBegun = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		SendClientTradeCancel = table.freeze({
			On = noop
		}),
		OnServerTradeCancel = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		ClientSentItemTradeOffer = table.freeze({
			On = noop
		}),
		ServerSentItemTradeOffer = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		RequestUpgradeInventorySpace = table.freeze({
			SetCallback = noop
		}),
		RequestRandomLootDrop = table.freeze({
			SetCallback = noop
		}),
		RequestItemCount = table.freeze({
			SetCallback = noop
		}),
		AddItemToCraftIngredient = table.freeze({
			SetCallback = noop
		}),
		CraftItem = table.freeze({
			SetCallback = noop
		}),
		RequestCurrentTradeStatus = table.freeze({
			SetCallback = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end
local reliable = ReplicatedStorage:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = ReplicatedStorage
end

local unreliable = ReplicatedStorage:FindFirstChild("ZAP_UNRELIABLE")
if unreliable == nil then
	unreliable = Instance.new("UnreliableRemoteEvent")
	unreliable.Name = "ZAP_UNRELIABLE"
	unreliable.Parent = ReplicatedStorage
end
local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

local function SendEvents()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(SendEvents)

local events = table.create(15)
events[1] = {}
events[2] = {}
events[4] = {}
events[6] = {}
events[8] = {}
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 1 then
			local value
			value = buffer.readu16(incoming_buff, read(2))
			for _, cb in events[1] do
				task.spawn(cb, player, value)
			end
		elseif id == 2 then
			local value
			incoming_ipos = incoming_ipos + 1
			value = incoming_inst[incoming_ipos]
			assert(value ~= nil)
			assert(value:IsA("Player"))
			for _, cb in events[2] do
				task.spawn(cb, player, value)
			end
		elseif id == 4 then
			local value
			incoming_ipos = incoming_ipos + 1
			value = incoming_inst[incoming_ipos]
			assert(value ~= nil)
			assert(value:IsA("Player"))
			for _, cb in events[4] do
				task.spawn(cb, player, value)
			end
		elseif id == 6 then
			local value
			for _, cb in events[6] do
				task.spawn(cb, player, value)
			end
		elseif id == 8 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.category = buffer.readstring(incoming_buff, read(len_1), len_1)
			value.id = buffer.readu32(incoming_buff, read(4))
			value.level = buffer.readu8(incoming_buff, read(1))
			for _, cb in events[8] do
				task.spawn(cb, player, value)
			end
		elseif id == 10 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			if events[10] then
				task.spawn(function(player, call_id, value)
					local rets = events[10](player, value)
					load_player(player)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 10)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, rets.success and 1 or 0)
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, rets.inventory)
					player_map[player] = save()
				end, player, call_id, value)
			end
		elseif id == 11 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			if events[11] then
				task.spawn(function(player, call_id, value)
					local rets = events[11](player, value)
					load_player(player)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 11)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, rets.success and 1 or 0)
					local len_1 = #rets.category
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
					alloc(len_1)
					buffer.writestring(outgoing_buff, outgoing_apos, rets.category, len_1)
					alloc(2)
					buffer.writeu16(outgoing_buff, outgoing_apos, rets.id)
					player_map[player] = save()
				end, player, call_id, value)
			end
		elseif id == 12 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.category = buffer.readstring(incoming_buff, read(len_1), len_1)
			value.id = buffer.readu32(incoming_buff, read(4))
			if events[12] then
				task.spawn(function(player, call_id, value)
					local rets = events[12](player, value)
					load_player(player)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 12)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, rets.success and 1 or 0)
					alloc(8)
					buffer.writef64(outgoing_buff, outgoing_apos, rets.count)
					player_map[player] = save()
				end, player, call_id, value)
			end
		elseif id == 13 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			value = {}
			value.craftIndex = buffer.readu16(incoming_buff, read(2))
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.category = buffer.readstring(incoming_buff, read(len_1), len_1)
			value.id = buffer.readu32(incoming_buff, read(4))
			value.level = buffer.readu8(incoming_buff, read(1))
			value.amount = buffer.readu32(incoming_buff, read(4))
			if events[13] then
				task.spawn(function(player, call_id, value)
					local rets = events[13](player, value)
					load_player(player)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 13)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, rets.success and 1 or 0)
					alloc(4)
					buffer.writeu32(outgoing_buff, outgoing_apos, rets.count)
					player_map[player] = save()
				end, player, call_id, value)
			end
		elseif id == 14 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			value = buffer.readu16(incoming_buff, read(2))
			if events[14] then
				task.spawn(function(player, call_id, value)
					local rets = events[14](player, value)
					load_player(player)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 14)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, rets.success and 1 or 0)
					player_map[player] = save()
				end, player, call_id, value)
			end
		elseif id == 15 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			if events[15] then
				task.spawn(function(player, call_id, value)
					local rets = events[15](player, value)
					load_player(player)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 15)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, rets.success and 1 or 0)
					player_map[player] = save()
				end, player, call_id, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
local returns = table.freeze({
	SendEvents = SendEvents,
	OnPlayerTradeRequest = table.freeze({
		Fire = function(Player: Player, Value: (Player))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			assert(Value:IsA("Player"))
			table.insert(outgoing_inst, Value)
			player_map[Player] = save()
		end,
		FireAll = function(Value: (Player))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			assert(Value:IsA("Player"))
			table.insert(outgoing_inst, Value)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: (Player))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			assert(Value:IsA("Player"))
			table.insert(outgoing_inst, Value)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: (Player))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			assert(Value:IsA("Player"))
			table.insert(outgoing_inst, Value)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: (Player))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			assert(Value:IsA("Player"))
			table.insert(outgoing_inst, Value)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	OnServerTradeBegun = table.freeze({
		Fire = function(Player: Player, Value: ({
			inviter: (Player),
			recipient: (Player),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			assert(Value.inviter:IsA("Player"))
			table.insert(outgoing_inst, Value.inviter)
			assert(Value.recipient:IsA("Player"))
			table.insert(outgoing_inst, Value.recipient)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			inviter: (Player),
			recipient: (Player),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			assert(Value.inviter:IsA("Player"))
			table.insert(outgoing_inst, Value.inviter)
			assert(Value.recipient:IsA("Player"))
			table.insert(outgoing_inst, Value.recipient)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			inviter: (Player),
			recipient: (Player),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			assert(Value.inviter:IsA("Player"))
			table.insert(outgoing_inst, Value.inviter)
			assert(Value.recipient:IsA("Player"))
			table.insert(outgoing_inst, Value.recipient)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			inviter: (Player),
			recipient: (Player),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			assert(Value.inviter:IsA("Player"))
			table.insert(outgoing_inst, Value.inviter)
			assert(Value.recipient:IsA("Player"))
			table.insert(outgoing_inst, Value.recipient)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			inviter: (Player),
			recipient: (Player),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			assert(Value.inviter:IsA("Player"))
			table.insert(outgoing_inst, Value.inviter)
			assert(Value.recipient:IsA("Player"))
			table.insert(outgoing_inst, Value.recipient)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	OnServerTradeCancel = table.freeze({
		Fire = function(Player: Player)
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			player_map[Player] = save()
		end,
		FireAll = function()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player)
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player })
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true })
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	ServerSentItemTradeOffer = table.freeze({
		Fire = function(Player: Player, Value: ({
			category: (string),
			id: (number),
			level: (number),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			local len_1 = #Value.category
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.category, len_1)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.id)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.level)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			category: (string),
			id: (number),
			level: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			local len_1 = #Value.category
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.category, len_1)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.id)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.level)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			category: (string),
			id: (number),
			level: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			local len_1 = #Value.category
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.category, len_1)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.id)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.level)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			category: (string),
			id: (number),
			level: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			local len_1 = #Value.category
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.category, len_1)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.id)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.level)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			category: (string),
			id: (number),
			level: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			local len_1 = #Value.category
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.category, len_1)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.id)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.level)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	SendAutoRollIndex = table.freeze({
		On = function(Callback: (Player, (number)) -> ()): () -> ()
			table.insert(events[1], Callback)
			return function()
				table.remove(events[1], table.find(events[1], Callback))
			end
		end,
	}),
	SendPlayerTradeRequest = table.freeze({
		On = function(Callback: (Player, (Player)) -> ()): () -> ()
			table.insert(events[2], Callback)
			return function()
				table.remove(events[2], table.find(events[2], Callback))
			end
		end,
	}),
	AcceptPlayerTradeRequest = table.freeze({
		On = function(Callback: (Player, (Player)) -> ()): () -> ()
			table.insert(events[4], Callback)
			return function()
				table.remove(events[4], table.find(events[4], Callback))
			end
		end,
	}),
	SendClientTradeCancel = table.freeze({
		On = function(Callback: (Player) -> ()): () -> ()
			table.insert(events[6], Callback)
			return function()
				table.remove(events[6], table.find(events[6], Callback))
			end
		end,
	}),
	ClientSentItemTradeOffer = table.freeze({
		On = function(Callback: (Player, ({
			category: (string),
			id: (number),
			level: (number),
		})) -> ()): () -> ()
			table.insert(events[8], Callback)
			return function()
				table.remove(events[8], table.find(events[8], Callback))
			end
		end,
	}),
	RequestUpgradeInventorySpace = table.freeze({
		SetCallback = function(Callback: (Player) -> (({
			success: (boolean),
			inventory: (number),
		}))): () -> ()
			events[10] = Callback
			return function()
				events[10] = nil
			end
		end,
	}),
	RequestRandomLootDrop = table.freeze({
		SetCallback = function(Callback: (Player) -> (({
			success: (boolean),
			category: (string),
			id: (number),
		}))): () -> ()
			events[11] = Callback
			return function()
				events[11] = nil
			end
		end,
	}),
	RequestItemCount = table.freeze({
		SetCallback = function(Callback: (Player, ({
			category: (string),
			id: (number),
		})) -> (({
			success: (boolean),
			count: (number),
		}))): () -> ()
			events[12] = Callback
			return function()
				events[12] = nil
			end
		end,
	}),
	AddItemToCraftIngredient = table.freeze({
		SetCallback = function(Callback: (Player, ({
			craftIndex: (number),
			category: (string),
			id: (number),
			level: (number),
			amount: (number),
		})) -> (({
			success: (boolean),
			count: (number),
		}))): () -> ()
			events[13] = Callback
			return function()
				events[13] = nil
			end
		end,
	}),
	CraftItem = table.freeze({
		SetCallback = function(Callback: (Player, (number)) -> (({
			success: (boolean),
		}))): () -> ()
			events[14] = Callback
			return function()
				events[14] = nil
			end
		end,
	}),
	RequestCurrentTradeStatus = table.freeze({
		SetCallback = function(Callback: (Player) -> (({
			success: (boolean),
		}))): () -> ()
			events[15] = Callback
			return function()
				events[15] = nil
			end
		end,
	}),
})
type Events = typeof(returns)
return returns
